// --- Игровое состояние ---
// Ход (1 = первый ход, нечётные ходы = синий игрок, чётные = красный)
let turn = 1;

// Игровое поле 3x3
// В начале каждая клетка = 50 (серый цвет)
// Потом клетка принимает 'blue' или 'red' в зависимости от игрока
let board = [
  [50, 50, 50], // строка 0: клетки a0, a1, a2
  [50, 50, 50], // строка 1: b0, b1, b2
  [50, 50, 50]  // строка 2: c0, c1, c2
];

// Матрица блокировки клеток (можно ли кликнуть)
// 1 = клетка свободна, 0 = занята
let block = [
  [1, 1, 1],
  [1, 1, 1],
  [1, 1, 1]
];

// Текущий цвет фона (blue или red, зависит от хода)
let b_color = 'blue';

// --------------------------------------------------------
// Настройка p5.js: создаём холст
function setup() {
  createCanvas(1000, 1000); // Игровое поле 1000x1000 пикселей
}

// --------------------------------------------------------
// Главный цикл отрисовки (обновляется каждый кадр)
function draw() {
  // Устанавливаем цвет фона в зависимости от хода
  b_color = (turn % 2 !== 0) ? 'blue' : 'red';
  background(b_color);

  // Рисуем внешнюю рамку (светло-серый квадрат 900x900)
  strokeWeight(2); // толщина линии
  stroke(0);       // обводка чёрным
  fill(200);       // заливка серым
  rect(50, 50, 900, 900, 10); // квадрат с закруглёнными углами

  // --- Рисуем клетки игрового поля ---
  for (let row = 0; row < 3; row++) {
    for (let col = 0; col < 3; col++) {
      // Координаты клетки на экране
      let x = 75 + col * 300;
      let y = 75 + row * 300;

      // Цвет клетки (берётся из board)
      fill(board[row][col]);

      // Рисуем клетку 250x250 с закруглёнными углами
      rect(x, y, 250, 250, 50);
    }
  }

  // --- Пишем чей сейчас ход ---
  fill(255);      // белый цвет текста
  textSize(42);   // размер шрифта
  if (b_color === 'blue') {
    text("Blue's turn", 42, 42); // Синие ходят
  } else {
    text("Red's turn", 42, 42);  // Красные ходят
  }

  // --- Проверка победителя или ничьи ---
  checkWin();

  // --- Экран конца игры ---
  if (turn === 21) { 
    // Синие выиграли
    setAllBlocks(0); // блокируем поле
    showEndScreen('Blue Win', '#0099ff');
  } else if (turn === 22) {
    // Красные выиграли
    setAllBlocks(0);
    showEndScreen('Red Win', '#e60000');
  } else if (turn === 10) {
    // Ничья
    setAllBlocks(0);
    fill(42);
    textSize(140);
    text('Draw', 330, 500); // надпись "Draw"

    // Кнопка "Restart"
    strokeWeight(10);
    fill(255);
    // Подсветка кнопки при наведении
    if (turn >= 10 && mouseX >= 260 && mouseX <= 710 && mouseY >= 510 && mouseY <= 670) {
      stroke('red');
      strokeWeight(10);
    }
    text('Restart', 260, 650);
    strokeWeight(0);
  }
}

// --------------------------------------------------------
// Функция: выставить все клетки как свободные/занятые
function setAllBlocks(val) {
  for (let r = 0; r < 3; r++) 
    for (let c = 0; c < 3; c++) 
      block[r][c] = val;
}

// --------------------------------------------------------
// Функция: показать экран конца игры
function showEndScreen(msg, color) {
  fill(255);
  textSize(140);
  strokeWeight(10);
  stroke(0);
  fill(color);
  text(msg, 210, 500); // сообщение о победителе

  // Кнопка "Restart"
  fill(255);
  if (turn >= 10 && mouseX >= 260 && mouseX <= 710 && mouseY >= 510 && mouseY <= 670) {
    stroke('red');      // подсветка красным при наведении
    strokeWeight(10);
  }
  text('Restart', 260, 650);
  strokeWeight(2);
}

// --------------------------------------------------------
// Функция: проверка победителя или ничьи
function checkWin() {
  // Вспомогательная функция: достать клетку
  const cell = (r, c) => board[r][c];

  // Все возможные линии (3 ряда, 3 колонки, 2 диагонали)
  const lines = [
    [[0,0],[0,1],[0,2]], // первая строка
    [[1,0],[1,1],[1,2]], // вторая строка
    [[2,0],[2,1],[2,2]], // третья строка
    [[0,0],[1,0],[2,0]], // первый столбец
    [[0,1],[1,1],[2,1]], // второй столбец
    [[0,2],[1,2],[2,2]], // третий столбец
    [[0,0],[1,1],[2,2]], // главная диагональ
    [[0,2],[1,1],[2,0]]  // побочная диагональ
  ];

  // Проверяем все линии
  for (let line of lines) {
    let vals = line.map(([r,c]) => cell(r,c));
    if (vals.every(v => v === 'blue')) turn = 21; // победа синих
    if (vals.every(v => v === 'red')) turn = 22;  // победа красных
  }

  // --- Проверка на ничью ---
  let filled = 0; // количество занятых клеток
  for (let r = 0; r < 3; r++) 
    for (let c = 0; c < 3; c++) {
      if (board[r][c] === 'blue' || board[r][c] === 'red') filled++;
    }
  // Если все 9 клеток заняты и нет победителя → ничья
  if (turn < 10 && filled === 9) turn = 10;
}

// --------------------------------------------------------
// Обработка кликов мыши
function mousePressed() {
  // --- Клик по клетке ---
  for (let row = 0; row < 3; row++) {
    for (let col = 0; col < 3; col++) {
      let x = 75 + col * 300;
      let y = 75 + row * 300;

      // Проверка: попал ли клик в эту клетку и она свободна
      if (
        mouseX >= x && mouseX <= x + 250 &&
        mouseY >= y && mouseY <= y + 250 &&
        block[row][col] === 1 && turn < 10
      ) {
        // Записываем цвет игрока в клетку
        board[row][col] = (turn % 2 !== 0) ? 'blue' : 'red';

        // Переходим к следующему ходу
        turn++;

        // Блокируем клетку, чтобы туда нельзя было походить снова
        block[row][col] = 0;
      }
    }
  }

  // --- Клик по кнопке Restart ---
  if (turn >= 10 && mouseX >= 240 && mouseX <= 760 && mouseY >= 510 && mouseY <= 670) {
    // Сброс игрового поля
    for (let r = 0; r < 3; r++) 
      for (let c = 0; c < 3; c++) {
        block[r][c] = 1; // клетка снова свободна
        board[r][c] = 50; // возвращаем серый цвет
      }
    turn = 1; // начинаем новую игру
  }
}
